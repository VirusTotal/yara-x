###############################################################################

- rule: |
    /* 
       Some 
       multi-line
       comment, which can contain /*
    */
    private global rule test {
      strings:
        $a = "foo"
      condition:
        true or /*in-line comment*/ false and not $a // end-of line comment
    }
  ast: |
    root
    └─ private global rule test
       ├─ strings
       │  └─ $a = "foo" 
       └─ condition
          └─ or
             ├─ true
             └─ and
                ├─ false
                └─ not
                   └─ $a
###############################################################################

- rule: |
    rule test {
      condition:
        (true or false) and not false
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ and
             ├─ or
             │  ├─ true
             │  └─ false
             └─ not
                └─ false

###############################################################################

- rule: |
    rule test {
      condition:
        foo or bar or baz
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ or
             ├─ foo
             ├─ bar
             └─ baz

###############################################################################

- rule: |
    rule test {
      strings:
        $a = "foo"
      condition:
        $a in (0..100)
    }
  ast: |
    root
    └─ rule test
       ├─ strings
       │  └─ $a = "foo" 
       └─ condition
          └─ $a in (<start>, <end>)
             ├─ <start>
             │  └─ 0
             └─ <end>
                └─ 100

###############################################################################

- rule: |
    rule test {
      strings:
        $a = "foo"
      condition:
        $a at 100 + 200
    }
  ast: |
    root
    └─ rule test
       ├─ strings
       │  └─ $a = "foo" 
       └─ condition
          └─ $a at <expr>
             └─ <expr>
                └─ add
                   ├─ 100
                   └─ 200

###############################################################################

- rule: |    
    rule test {
      strings:
        $a = "foo"
      condition:
        #a in (100+100..400) == 2
    }
  ast: |
    root
    └─ rule test
       ├─ strings
       │  └─ $a = "foo" 
       └─ condition
          └─ eq
             ├─ #a in <range>
             │  └─ <range>
             │     ├─ add
             │     │  ├─ 100
             │     │  └─ 100
             │     └─ 400
             └─ 2

###############################################################################

- rule: |    
    rule test {
      strings:
        $a = "foo"
      condition:
        @a[2] == 0x1000
    }
  ast: |
    root
    └─ rule test
       ├─ strings
       │  └─ $a = "foo" 
       └─ condition
          └─ eq
             ├─ @a[<index>]
             │  └─ <index>
             │     └─ 2
             └─ 0x1000

###############################################################################

- rule: |    
    rule test {
      condition:
        entrypoint == 1000 + 2000
    }
  ast: | 
    root
    └─ rule test
       └─ condition
          └─ eq
             ├─ entrypoint
             └─ add
                ├─ 1000
                └─ 2000

###############################################################################

- rule: |    
    rule test {
      condition:
        2 > 1 and 1.0 < 3 and 4 <= 4.0 and 5 > 4.9 and 5 >= 5.0 
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ and
             ├─ gt
             │  ├─ 2
             │  └─ 1
             ├─ lt
             │  ├─ 1.0
             │  └─ 3
             ├─ le
             │  ├─ 4
             │  └─ 4.0
             ├─ gt
             │  ├─ 5
             │  └─ 4.9
             └─ ge
                ├─ 5
                └─ 5.0

###############################################################################

- rule: |    
    rule test {
      condition:
        foo.bar[0].baz == foo.bar.baz()
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ eq
             ├─ field access
             │  ├─ <expr>[<index>]
             │  │  ├─ <expr>
             │  │  │  └─ field access
             │  │  │     ├─ foo
             │  │  │     └─ bar
             │  │  └─ <index>
             │  │     └─ 0
             │  └─ baz
             └─ <callable>()
                └─ <callable>
                   └─ field access
                      ├─ foo
                      ├─ bar
                      └─ baz

###############################################################################

- rule: |    
    rule test {
      condition:
        foo.bar(1,2).baz
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ field access
             ├─ <callable>(<arg0>, <arg1>)
             │  ├─ <callable>
             │  │  └─ field access
             │  │     ├─ foo
             │  │     └─ bar
             │  ├─ <arg0>
             │  │  └─ 1
             │  └─ <arg1>
             │     └─ 2
             └─ baz

###############################################################################

- rule: |
    rule test {
      condition:
        foo[0]
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ <expr>[<index>]
             ├─ <expr>
             │  └─ foo
             └─ <index>
                └─ 0

###############################################################################

- rule: |
    rule test {
      condition:
        foo.bar[0].baz
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ field access
             ├─ <expr>[<index>]
             │  ├─ <expr>
             │  │  └─ field access
             │  │     ├─ foo
             │  │     └─ bar
             │  └─ <index>
             │     └─ 0
             └─ baz

###############################################################################

- rule: |
    rule test {
      condition:
        trueFoo
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ trueFoo

###############################################################################

- rule: |
    rule test {
      condition:
        notFoo
    }
  ast: |
    root
    └─ rule test
       └─ condition
          └─ notFoo

###############################################################################