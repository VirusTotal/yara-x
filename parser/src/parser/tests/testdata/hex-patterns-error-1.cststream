Begin { kind: SOURCE_FILE, span: Span(0..124) }
Begin { kind: RULE_DECL, span: Span(0..66) }
Token { kind: RULE_KW, span: Span(0..4) }
Token { kind: WHITESPACE, span: Span(4..5) }
Token { kind: IDENT, span: Span(5..9) }
Token { kind: WHITESPACE, span: Span(9..10) }
Token { kind: L_BRACE, span: Span(10..11) }
Token { kind: NEWLINE, span: Span(11..12) }
Token { kind: WHITESPACE, span: Span(12..13) }
Begin { kind: ERROR, span: Span(13..43) }
Token { kind: STRINGS_KW, span: Span(13..20) }
Token { kind: COLON, span: Span(20..21) }
Token { kind: NEWLINE, span: Span(21..22) }
Token { kind: WHITESPACE, span: Span(22..25) }
Begin { kind: ERROR, span: Span(25..29) }
Token { kind: PATTERN_IDENT, span: Span(25..27) }
Token { kind: WHITESPACE, span: Span(27..28) }
Token { kind: EQUAL, span: Span(28..29) }
End { kind: ERROR, span: Span(25..29) }
Token { kind: WHITESPACE, span: Span(29..30) }
Error { message: "expecting BYTE or `(`, found `)`", span: Span(40..41) }
Token { kind: L_BRACE, span: Span(30..31) }
Token { kind: WHITESPACE, span: Span(31..32) }
Token { kind: HEX_BYTE, span: Span(32..34) }
Token { kind: WHITESPACE, span: Span(34..35) }
Token { kind: L_PAREN, span: Span(35..36) }
Token { kind: HEX_BYTE, span: Span(36..38) }
Token { kind: WHITESPACE, span: Span(38..39) }
Token { kind: PIPE, span: Span(39..40) }
Token { kind: R_PAREN, span: Span(40..41) }
Token { kind: WHITESPACE, span: Span(41..42) }
Token { kind: R_BRACE, span: Span(42..43) }
End { kind: ERROR, span: Span(13..43) }
Token { kind: NEWLINE, span: Span(43..44) }
Token { kind: WHITESPACE, span: Span(44..46) }
Begin { kind: CONDITION_BLK, span: Span(46..64) }
Token { kind: CONDITION_KW, span: Span(46..55) }
Token { kind: COLON, span: Span(55..56) }
Token { kind: NEWLINE, span: Span(56..57) }
Token { kind: WHITESPACE, span: Span(57..60) }
Begin { kind: BOOLEAN_EXPR, span: Span(60..64) }
Begin { kind: BOOLEAN_TERM, span: Span(60..64) }
Token { kind: TRUE_KW, span: Span(60..64) }
End { kind: BOOLEAN_TERM, span: Span(60..64) }
End { kind: BOOLEAN_EXPR, span: Span(60..64) }
End { kind: CONDITION_BLK, span: Span(46..64) }
Token { kind: NEWLINE, span: Span(64..65) }
Token { kind: R_BRACE, span: Span(65..66) }
End { kind: RULE_DECL, span: Span(0..66) }
Token { kind: NEWLINE, span: Span(66..67) }
Token { kind: NEWLINE, span: Span(67..68) }
Begin { kind: RULE_DECL, span: Span(68..124) }
Token { kind: RULE_KW, span: Span(68..72) }
Token { kind: WHITESPACE, span: Span(72..73) }
Token { kind: IDENT, span: Span(73..77) }
Token { kind: WHITESPACE, span: Span(77..78) }
Token { kind: L_BRACE, span: Span(78..79) }
Token { kind: NEWLINE, span: Span(79..80) }
Token { kind: WHITESPACE, span: Span(80..81) }
Begin { kind: ERROR, span: Span(81..101) }
Token { kind: STRINGS_KW, span: Span(81..88) }
Token { kind: COLON, span: Span(88..89) }
Token { kind: NEWLINE, span: Span(89..90) }
Token { kind: WHITESPACE, span: Span(90..93) }
Begin { kind: ERROR, span: Span(93..97) }
Token { kind: PATTERN_IDENT, span: Span(93..95) }
Token { kind: WHITESPACE, span: Span(95..96) }
Token { kind: EQUAL, span: Span(96..97) }
End { kind: ERROR, span: Span(93..97) }
Token { kind: WHITESPACE, span: Span(97..98) }
Error { message: "expecting BYTE or `(`, found `}`", span: Span(100..101) }
Token { kind: L_BRACE, span: Span(98..99) }
Token { kind: WHITESPACE, span: Span(99..100) }
Token { kind: R_BRACE, span: Span(100..101) }
End { kind: ERROR, span: Span(81..101) }
Token { kind: NEWLINE, span: Span(101..102) }
Token { kind: WHITESPACE, span: Span(102..104) }
Begin { kind: CONDITION_BLK, span: Span(104..122) }
Token { kind: CONDITION_KW, span: Span(104..113) }
Token { kind: COLON, span: Span(113..114) }
Token { kind: NEWLINE, span: Span(114..115) }
Token { kind: WHITESPACE, span: Span(115..118) }
Begin { kind: BOOLEAN_EXPR, span: Span(118..122) }
Begin { kind: BOOLEAN_TERM, span: Span(118..122) }
Token { kind: TRUE_KW, span: Span(118..122) }
End { kind: BOOLEAN_TERM, span: Span(118..122) }
End { kind: BOOLEAN_EXPR, span: Span(118..122) }
End { kind: CONDITION_BLK, span: Span(104..122) }
Token { kind: NEWLINE, span: Span(122..123) }
Token { kind: R_BRACE, span: Span(123..124) }
End { kind: RULE_DECL, span: Span(68..124) }
End { kind: SOURCE_FILE, span: Span(0..124) }
