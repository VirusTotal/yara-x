Begin { kind: SOURCE_FILE, span: Span(0..92) }
Begin { kind: RULE_DECL, span: Span(0..92) }
Token { kind: RULE_KW, span: Span(0..4) }
Token { kind: WHITESPACE, span: Span(4..5) }
Token { kind: IDENT, span: Span(5..9) }
Token { kind: WHITESPACE, span: Span(9..10) }
Token { kind: L_BRACE, span: Span(10..11) }
Token { kind: NEWLINE, span: Span(11..12) }
Token { kind: WHITESPACE, span: Span(12..13) }
Begin { kind: ERROR, span: Span(13..90) }
Token { kind: CONDITION_KW, span: Span(13..22) }
Token { kind: COLON, span: Span(22..23) }
Token { kind: NEWLINE, span: Span(23..24) }
Token { kind: WHITESPACE, span: Span(24..26) }
Begin { kind: ERROR, span: Span(26..26) }
Begin { kind: ERROR, span: Span(26..26) }
End { kind: ERROR, span: Span(26..26) }
End { kind: ERROR, span: Span(26..26) }
Token { kind: WITH_KW, span: Span(26..30) }
Error { message: "expecting operator, `,` or `:`, found `(`", span: Span(50..51) }
Token { kind: WHITESPACE, span: Span(30..31) }
Token { kind: IDENT, span: Span(31..36) }
Token { kind: WHITESPACE, span: Span(36..37) }
Token { kind: EQUAL, span: Span(37..38) }
Token { kind: WHITESPACE, span: Span(38..39) }
Token { kind: IDENT, span: Span(39..42) }
Token { kind: DOT, span: Span(42..43) }
Token { kind: IDENT, span: Span(43..46) }
Token { kind: L_BRACKET, span: Span(46..47) }
Token { kind: INTEGER_LIT, span: Span(47..48) }
Token { kind: R_BRACKET, span: Span(48..49) }
Token { kind: WHITESPACE, span: Span(49..50) }
Token { kind: L_PAREN, span: Span(50..51) }
Token { kind: WHITESPACE, span: Span(51..52) }
Token { kind: NEWLINE, span: Span(52..53) }
Token { kind: WHITESPACE, span: Span(53..65) }
Token { kind: IDENT, span: Span(65..70) }
Token { kind: WHITESPACE, span: Span(70..71) }
Token { kind: EQ, span: Span(71..73) }
Token { kind: WHITESPACE, span: Span(73..74) }
Token { kind: STRING_LIT, span: Span(74..80) }
Token { kind: NEWLINE, span: Span(80..81) }
Token { kind: WHITESPACE, span: Span(81..89) }
Token { kind: R_PAREN, span: Span(89..90) }
End { kind: ERROR, span: Span(13..90) }
Token { kind: NEWLINE, span: Span(90..91) }
Token { kind: R_BRACE, span: Span(91..92) }
End { kind: RULE_DECL, span: Span(0..92) }
End { kind: SOURCE_FILE, span: Span(0..92) }
